name: Verificar Pull Request a Dev

on:
  pull_request:
    branches:
      - 'dev'
  push:
    branches-ignore:
      - 'dev'
      - 'main'
      - 'master'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  verify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout del c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Configurar PNPM
      uses: pnpm/action-setup@v4
      with:
        version: 10.12.4
        run_install: false

    - name: Obtener directorio de store de PNPM
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Configurar cach√© de PNPM
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Instalar dependencias
      run: |
        echo "üì¶ Instalando dependencias con PNPM..."
        pnpm install
        echo "‚úÖ Dependencias instaladas correctamente"

    - name: Ejecutar verificaci√≥n de c√≥digo con Biome
      run: |
        echo "üîç Ejecutando verificaci√≥n de c√≥digo con Biome..."
        if ! pnpm ci:check; then
          echo "‚ùå Error: La verificaci√≥n de c√≥digo con Biome ha fallado"
          echo "üí° Ejecuta 'pnpm check' localmente para corregir los errores"
          exit 1
        fi
        echo "‚úÖ Verificaci√≥n de c√≥digo completada"

    - name: Ejecutar pruebas con cobertura
      run: |
        echo "üß™ Ejecutando pruebas con cobertura..."
        if ! pnpm test:coverage; then
          echo "‚ùå Error: Las pruebas han fallado o la cobertura est√° por debajo del umbral"
          echo "üìä Umbrales requeridos:"
          echo "   ‚Ä¢ Lines: 90%"
          echo "   ‚Ä¢ Functions: 75%"
          echo "   ‚Ä¢ Branches: 88%"
          echo "   ‚Ä¢ Statements: 90%"
          echo "üí° Ejecuta 'pnpm test:coverage' localmente para ver los detalles"
          exit 1
        fi
        echo "‚úÖ Pruebas y cobertura completadas"

    - name: Generar build de producci√≥n
      run: |
        echo "üèóÔ∏è Generando build de producci√≥n..."
        if ! pnpm build; then
          echo "‚ùå Error: La generaci√≥n del build ha fallado"
          exit 1
        fi
        echo "‚úÖ Build generado correctamente"

    - name: Verificar que no hay archivos sin commitear
      run: |
        echo "üìù Verificando cambios no commiteados..."
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Error: Hay archivos modificados despu√©s del build"
          echo "üí° Por favor, ejecuta el build localmente y commitea los cambios"
          git status --porcelain
          exit 1
        fi
        echo "‚úÖ No hay cambios sin commitear"
    
    - name: Notificar resultado exitoso
      if: success()
      run: |
        echo "üéâ VERIFICACI√ìN EXITOSA üéâ"
        echo "‚úÖ Todas las verificaciones han pasado correctamente."
        echo "‚úÖ El c√≥digo cumple con los est√°ndares de calidad requeridos."
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "üëç El Pull Request puede ser aprobado y mergeado a dev."
        else
          echo "üëç El c√≥digo est√° listo para crear un Pull Request a dev."
        fi
        
    - name: Resumen de verificaci√≥n para PR
      if: success()
      run: |
        echo "### ‚úÖ Verificaci√≥n exitosa" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Todas las verificaciones pasaron correctamente:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úì Instalaci√≥n de dependencias" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úì Verificaci√≥n de c√≥digo con Biome" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úì Tests con cobertura (‚â•90%)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úì Build de producci√≥n" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úì Sin cambios no commiteados" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "El PR #${{ github.event.pull_request.number }} est√° listo para ser mergeado a la rama dev." >> $GITHUB_STEP_SUMMARY
        else
          echo "El c√≥digo en la rama ${{ github.ref_name }} est√° listo para crear un PR." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comentar en el PR (Solo en pull requests)
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **Todas las verificaciones pasaron exitosamente**\n\n' +
                    '- ‚úì C√≥digo formateado con Biome\n' +
                    '- ‚úì Sin errores de linting\n' +
                    '- ‚úì Tests pasando con cobertura ‚â•90%\n' +
                    '- ‚úì Build de producci√≥n exitoso\n\n' +
                    '¬°Este PR est√° listo para ser revisado y mergeado! üöÄ'
            });
            console.log('‚úÖ Comentario a√±adido exitosamente al PR');
          } catch (error) {
            console.log('‚ö†Ô∏è No se pudo a√±adir comentario al PR (permisos insuficientes)');
            console.log('‚ÑπÔ∏è Las verificaciones pasaron correctamente, pero el bot no puede comentar');
          }